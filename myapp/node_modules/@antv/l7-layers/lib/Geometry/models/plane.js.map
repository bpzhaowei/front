{"version":3,"sources":["../../../src/Geometry/models/plane.ts"],"names":["PlaneModel","layer","getLayerConfig","width","height","widthSegments","heightSegments","center","terrainTexture","initPlane","indices","positions","loadTerrainTexture","vertices","size","lng","lat","widthHalf","heightHalf","gridX","Math","floor","gridY","gridX1","gridY1","segmentWidth","segmentHeight","iy","y","ix","x","mapService","version","Version","lngLatToCoord","a","b","push","c","d","opacity","mapTexture","terrainClipHeight","texture","destroy","updateTexture","u_opacity","u_mapFlag","u_terrainClipHeight","u_texture","mask","maskInside","createTexture2D","rendererService","buildLayerModel","moduleName","vertexShader","planeVert","fragmentShader","planeFrag","triangulation","planeGeometryTriangulation","primitive","gl","TRIANGLES","depth","enable","blend","getBlend","stencil","cull","face","BACK","img","canvas","document","createElement","ctx","getContext","drawImage","imageData","getImageData","rgb2height","r","g","terrainImage","Image","crossOrigin","onload","imgWidth","imgHeight","data","widthStep","heihgtStep","imgIndexY","imgLen","imgIndexX","imgDataIndex","z","models","planeGeometryUpdateTriangulation","layerService","renderLayers","src","initModels","wrapS","CLAMP_TO_EDGE","wrapT","updateLayerRenderList","properties","type","minimum","maximum","styleAttributeService","registerStyleAttribute","name","AttributeType","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","FLOAT","update","feature","featureIdx","vertex","attributeIdx","BaseModel"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { Version } from '@antv/l7-maps';\nimport { getMask, isMini } from '@antv/l7-utils';\n// import { mat4, vec3 } from 'gl-matrix';\nimport BaseModel from '../../core/BaseModel';\nimport { IGeometryLayerStyleOptions } from '../../core/interface';\nimport planeFrag from '../shaders/plane_frag.glsl';\nimport planeVert from '../shaders/plane_vert.glsl';\n\nexport default class PlaneModel extends BaseModel {\n  protected texture: ITexture2D;\n  protected mapTexture: string | undefined;\n  protected positions: number[];\n  protected indices: number[];\n\n  public initPlane(\n    width = 1,\n    height = 1,\n    widthSegments = 1,\n    heightSegments = 1,\n    lng = 120,\n    lat = 30,\n  ) {\n    // https://github.com/mrdoob/three.js/blob/dev/src/geometries/PlaneGeometry.js\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n\n    const indices = [];\n    const positions = [];\n\n    for (let iy = 0; iy < gridY1; iy++) {\n      const y = iy * segmentHeight - heightHalf;\n\n      for (let ix = 0; ix < gridX1; ix++) {\n        const x = ix * segmentWidth - widthHalf;\n        if (this.mapService.version === Version['GAODE2.x']) {\n          // @ts-ignore\n          const [a, b] = this.mapService.lngLatToCoord([x + lng, -y + lat]) as [\n            number,\n            number,\n          ];\n          positions.push(a, b, 0);\n        } else {\n          positions.push(x + lng, -y + lat, 0);\n        }\n\n        positions.push(ix / gridX);\n        positions.push(1 - iy / gridY);\n      }\n    }\n\n    for (let iy = 0; iy < gridY; iy++) {\n      for (let ix = 0; ix < gridX; ix++) {\n        const a = ix + gridX1 * iy;\n        const b = ix + gridX1 * (iy + 1);\n        const c = ix + 1 + gridX1 * (iy + 1);\n        const d = ix + 1 + gridX1 * iy;\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    return { indices, positions };\n  }\n\n  public planeGeometryTriangulation = () => {\n    const {\n      width = 1,\n      height = 1,\n      widthSegments = 1,\n      heightSegments = 1,\n      center = [120, 30],\n      terrainTexture,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n\n    const { indices, positions } = this.initPlane(\n      width,\n      height,\n      widthSegments,\n      heightSegments,\n      ...center,\n    );\n    this.positions = positions;\n    this.indices = indices;\n\n    if (terrainTexture) {\n      // 存在地形贴图的时候会根据地形贴图对顶点进行偏移\n      this.loadTerrainTexture();\n    }\n\n    return {\n      vertices: positions,\n      indices,\n      size: 5,\n    };\n  };\n  public planeGeometryUpdateTriangulation = () => {\n    return {\n      vertices: this.positions,\n      indices: this.indices,\n      size: 5,\n    };\n  };\n\n  public getUninforms(): IModelUniform {\n    const {\n      opacity,\n      mapTexture,\n      terrainClipHeight = 0,\n      terrainTexture,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    if (this.mapTexture !== mapTexture) {\n      this.mapTexture = mapTexture;\n      this.texture?.destroy();\n      this.updateTexture(mapTexture);\n    }\n    return {\n      u_opacity: opacity || 1,\n      u_mapFlag: mapTexture ? 1 : 0,\n      u_terrainClipHeight: terrainTexture ? terrainClipHeight : -1,\n      u_texture: this.texture,\n      // u_ModelMatrix: mat4.translate(mat4.create(), mat4.create(), [1, 0, 0])\n      // u_ModelMatrix: mat4.rotateZ(mat4.create(), mat4.create(), 10)\n      // u_ModelMatrix: mat4.rotateZ(mat4.create(), mat4.create(), 10)\n      // u_ModelMatrix: this.rotateZ()\n    };\n  }\n\n  public clearModels(): void {\n    this.texture?.destroy();\n  }\n\n  public initModels() {\n    const {\n      mask = false,\n      maskInside = true,\n      mapTexture,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    this.mapTexture = mapTexture;\n\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      height: 0,\n      width: 0,\n    });\n\n    this.updateTexture(mapTexture);\n\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'geometry_plane',\n        vertexShader: planeVert,\n        fragmentShader: planeFrag,\n        triangulation: this.planeGeometryTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: { enable: true },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside),\n        cull: {\n          enable: true,\n          face: gl.BACK, // gl.FRONT | gl.BACK;\n        },\n      }),\n    ];\n  }\n\n  public getImageData(img: HTMLImageElement) {\n    const canvas: HTMLCanvasElement = document.createElement('canvas');\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    const { width, height } = img;\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, width, height);\n    const imageData = ctx.getImageData(0, 0, width, height);\n\n    return imageData;\n  }\n\n  /**\n   * load terrain texture & offset attribute z\n   */\n  public loadTerrainTexture(): void {\n    const {\n      mask = false,\n      maskInside = true,\n      widthSegments = 1,\n      heightSegments = 1,\n      terrainTexture,\n      rgb2height = (r: number, g: number, b: number) => r + g + b,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    const terrainImage = new Image();\n    terrainImage.crossOrigin = 'anonymous';\n    terrainImage.onload = () => {\n      const imgWidth = terrainImage.width;\n      const imgHeight = terrainImage.height;\n\n      const imageData = this.getImageData(terrainImage).data;\n\n      const gridX = Math.floor(widthSegments);\n      const gridY = Math.floor(heightSegments);\n\n      const gridX1 = gridX + 1;\n      const gridY1 = gridY + 1;\n\n      const widthStep = imgWidth / gridX;\n      const heihgtStep = imgHeight / gridY;\n\n      for (let iy = 0; iy < gridY1; iy++) {\n        const imgIndexY = Math.floor(iy * heihgtStep);\n        const imgLen = imgIndexY * imgWidth;\n\n        for (let ix = 0; ix < gridX1; ix++) {\n          const imgIndexX = Math.floor(ix * widthStep);\n          const imgDataIndex = (imgLen + imgIndexX) * 4;\n\n          const r = imageData[imgDataIndex];\n          const g = imageData[imgDataIndex + 1];\n          const b = imageData[imgDataIndex + 2];\n\n          const z = (iy * gridX1 + ix) * 5 + 2;\n          this.positions[z] = rgb2height(r, g, b);\n        }\n      }\n\n      this.layer.models = [\n        this.layer.buildLayerModel({\n          moduleName: 'geometry_plane',\n          vertexShader: planeVert,\n          fragmentShader: planeFrag,\n          triangulation: this.planeGeometryUpdateTriangulation,\n          primitive: gl.TRIANGLES,\n          depth: { enable: true },\n          blend: this.getBlend(),\n          stencil: getMask(mask, maskInside),\n          cull: {\n            enable: true,\n            face: gl.BACK,\n          },\n        }),\n      ];\n      this.layerService.renderLayers();\n    };\n    terrainImage.src = terrainTexture as string;\n  }\n\n  public buildModels() {\n    return this.initModels();\n  }\n\n  public updateTexture(mapTexture: string | undefined): void {\n    const { createTexture2D } = this.rendererService;\n\n    if (mapTexture) {\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.onload = () => {\n        this.texture = createTexture2D({\n          data: img,\n          width: img.width,\n          height: img.height,\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE,\n        });\n        this.layerService.updateLayerRenderList();\n        this.layerService.renderLayers();\n      };\n      img.src = mapTexture;\n    } else {\n      this.texture = createTexture2D({\n        width: 0,\n        height: 0,\n      });\n    }\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n}\n"],"file":"plane.js"}