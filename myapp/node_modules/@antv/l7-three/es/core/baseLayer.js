import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { BaseLayer } from '@antv/l7-layers';
import { Matrix4, Scene, Vector3 } from 'three';
import { ThreeRenderServiceType } from './threeRenderService';
var DEG2RAD = Math.PI / 180;

var ThreeJSLayer = function (_BaseLayer) {
  _inherits(ThreeJSLayer, _BaseLayer);

  var _super = _createSuper(ThreeJSLayer);

  function ThreeJSLayer() {
    var _this;

    _classCallCheck(this, ThreeJSLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "type", 'custom');

    _defineProperty(_assertThisInitialized(_this), "threeRenderService", void 0);

    _defineProperty(_assertThisInitialized(_this), "isUpdate", false);

    _defineProperty(_assertThisInitialized(_this), "update", null);

    _defineProperty(_assertThisInitialized(_this), "scene", new Scene());

    _defineProperty(_assertThisInitialized(_this), "renderer", void 0);

    _defineProperty(_assertThisInitialized(_this), "animateMixer", []);

    _defineProperty(_assertThisInitialized(_this), "center", void 0);

    return _this;
  }

  _createClass(ThreeJSLayer, [{
    key: "setUpdate",
    value: function setUpdate(callback) {
      this.update = callback;
      this.isUpdate = true;
    }
  }, {
    key: "getModelMatrix",
    value: function getModelMatrix(lnglat) {
      var altitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0, 0];
      var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];
      return new Matrix4().fromArray(this.mapService.getModelMatrix(lnglat, altitude, rotation, scale, this.threeRenderService.center));
    }
  }, {
    key: "getTranslateMatrix",
    value: function getTranslateMatrix(lnglat) {
      var altitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this.getModelMatrix(lnglat, altitude, [0, 0, 0], [1, 1, 1]);
    }
  }, {
    key: "applyObjectLngLat",
    value: function applyObjectLngLat(object, lnglat) {
      var altitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var positionMatrix = this.getTranslateMatrix(lnglat, altitude);
      object.applyMatrix4(positionMatrix);
    }
  }, {
    key: "setObjectLngLat",
    value: function setObjectLngLat(object, lnglat) {
      var altitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      var _this$lnglatToCoord = this.lnglatToCoord(lnglat),
          _this$lnglatToCoord2 = _slicedToArray(_this$lnglatToCoord, 2),
          x = _this$lnglatToCoord2[0],
          y = _this$lnglatToCoord2[1];

      object.position.set(x, y, altitude);
    }
  }, {
    key: "lnglatToCoord",
    value: function lnglatToCoord(lnglat) {
      var _this$mapService;

      var _this$mapService$lngL = (_this$mapService = this.mapService) === null || _this$mapService === void 0 ? void 0 : _this$mapService.lngLatToCoord(lnglat, this.threeRenderService.center),
          _this$mapService$lngL2 = _slicedToArray(_this$mapService$lngL, 2),
          x = _this$mapService$lngL2[0],
          y = _this$mapService$lngL2[1];

      return [x, y];
    }
  }, {
    key: "getObjectLngLat",
    value: function getObjectLngLat(object) {
      var coord = [object.position.x, object.position.y];
      return [0, 0];
    }
  }, {
    key: "adjustMeshToMap",
    value: function adjustMeshToMap(object) {
      object.up = new Vector3(0, 0, 1);
      var defaultLngLat = this.mapService.getCenter();
      var modelMatrix = this.getModelMatrix([defaultLngLat.lng, defaultLngLat.lat], 0, [Math.PI / 2, -Math.PI, 0], [1, 1, 1]);
      object.applyMatrix4(modelMatrix);
    }
  }, {
    key: "setMeshScale",
    value: function setMeshScale(object) {
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var z = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var scaleMatrix = new Matrix4();
      scaleMatrix.scale(new Vector3(x, y, z));
      object.applyMatrix4(scaleMatrix);
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      this.threeRenderService = this.getContainer().get(ThreeRenderServiceType);
      var config = this.getLayerConfig();

      if (config && config.onAddMeshes) {
        config.onAddMeshes(this.scene, this);
      }
    }
  }, {
    key: "renderModels",
    value: function renderModels() {
      var _this2 = this;

      if (this.isUpdate && this.update) {
        this.update();
      }

      var gl = this.rendererService.getGLContext();
      this.rendererService.setCustomLayerDefaults();
      var cullFace = this.mapService.constructor.name === 'AMapService' ? gl.BACK : gl.FRONT;
      gl.cullFace(cullFace);
      var renderer = this.threeRenderService.renderer;
      renderer.state.reset();
      renderer.autoClear = false;
      var camera = this.threeRenderService.getRenderCamera();
      renderer.render(this.scene, camera);
      this.rendererService.setState();
      this.animateMixer.forEach(function (mixer) {
        mixer.update(_this2.getTime());
      });
      this.rendererService.setState();
      this.rendererService.setDirty(true);
      return this;
    }
  }, {
    key: "renderAMapModels",
    value: function renderAMapModels() {
      var _this3 = this;

      var gl = this.rendererService.getGLContext();
      this.rendererService.setCustomLayerDefaults();
      var renderer = this.threeRenderService.renderer;
      renderer.state.reset();
      renderer.autoClear = false;
      renderer.render(this.scene, this.threeRenderService.getRenderCamera());
      this.animateMixer.forEach(function (mixer) {
        mixer.update(_this3.getTime());
      });
      this.rendererService.setBaseState();
      this.rendererService.setDirty(true);
      return this;
    }
  }, {
    key: "getRenderCamera",
    value: function getRenderCamera() {
      return this.threeRenderService.getRenderCamera();
    }
  }, {
    key: "addAnimateMixer",
    value: function addAnimateMixer(mixer) {
      this.animateMixer.push(mixer);
    }
  }, {
    key: "setBottomColor",
    value: function setBottomColor(color) {
      console.warn('empty function');
    }
  }, {
    key: "getBottomColor",
    value: function getBottomColor() {
      return 'rgba(0, 0, 0, 0)';
    }
  }]);

  return ThreeJSLayer;
}(BaseLayer);

export { ThreeJSLayer as default };
//# sourceMappingURL=baseLayer.js.map