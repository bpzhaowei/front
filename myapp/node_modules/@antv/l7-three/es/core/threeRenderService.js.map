{"version":3,"sources":["../../src/core/threeRenderService.ts"],"names":["TYPES","inject","injectable","Matrix4","PerspectiveCamera","Scene","ThreeScene","WebGLRenderer","DEG2RAD","Math","PI","ThreeRenderServiceType","Symbol","for","ThreeRenderService","IRendererService","IMapService","canvas","rendererService","getCanvas","gl","getGLContext","center","mapService","getCenter","lngLatToMercator","lng","lat","x","y","z","cameraTransform","makeTranslation","renderer","context","antialias","autoClear","gammaFactor","shadowMap","enabled","scene","aspect","drawingBufferWidth","drawingBufferHeight","camera","version","AMapCamera","AMap2Camera","mapboxCamera","mercatorMatrix","fromArray","map","transform","customLayerMatrix","projectionMatrix","multiply","mapCamera","getCameraState","pitch","rotation","fov","near","far","height","updateProjectionMatrix","position","cos","sin","up","lookAt","customCoords","getCameraParams","set"],"mappings":"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","sourcesContent":["import { IMapService, IMercator, IRendererService, TYPES } from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\n\nimport {\n  AnimationMixer,\n  Camera,\n  Matrix4,\n  PCFSoftShadowMap,\n  PerspectiveCamera,\n  Scene as ThreeScene,\n  WebGLRenderer,\n} from 'three';\nconst DEG2RAD = Math.PI / 180;\nexport interface IThreeRenderService {\n  renderer: WebGLRenderer;\n  camera: Camera;\n  center: IMercator;\n  init(): void;\n  getRenderCamera(): Camera;\n}\nexport const ThreeRenderServiceType = Symbol.for('ThreeJSRenderService');\n@injectable()\nexport class ThreeRenderService implements IThreeRenderService {\n  public renderer: WebGLRenderer;\n  public camera: Camera;\n  public center: IMercator;\n  public aspect: number;\n  public update: () => void;\n  private scene: ThreeScene;\n\n  // 初始状态相机变换矩阵\n  private cameraTransform: Matrix4;\n\n  @inject(TYPES.IRendererService)\n  private readonly rendererService: IRendererService;\n\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  public init() {\n    // 从 L7 的 renderer 中获取可视化层的 canvas/gl\n    const canvas = this.rendererService.getCanvas() as HTMLCanvasElement;\n    const gl = this.rendererService.getGLContext();\n    if (canvas && gl) {\n      const center = this.mapService.getCenter();\n      this.center = this.mapService.lngLatToMercator(\n        [center.lng, center.lat],\n        0,\n      );\n    }\n    const { x, y, z } = this.center;\n    this.cameraTransform = new Matrix4().makeTranslation(x, y, z);\n\n    // 根据 L7 的 canvas/gl 构建 threejs 的 renderer\n    this.renderer = new WebGLRenderer({\n      canvas,\n      context: gl,\n      antialias: true,\n    });\n\n    this.renderer.autoClear = false;\n    // 是否需要 gamma correction?\n    this.renderer.gammaFactor = 2.2;\n    this.renderer.shadowMap.enabled = true;\n    // this.renderer.shadowMap.type = PCFSoftShadowMap;\n\n    this.scene = new ThreeScene();\n\n    this.aspect = gl.drawingBufferWidth / gl.drawingBufferHeight;\n    this.camera = new PerspectiveCamera(45, this.aspect, 1, 20000000);\n  }\n  public getRenderCamera(): Camera {\n    /**\n     * map version\n     * GAODE1.x\n     * GAODE2.x\n     * MAPBOX\n     */\n    switch (this.mapService.version) {\n      case 'GAODE1.x':\n        return this.AMapCamera();\n      case 'GAODE2.x':\n        return this.AMap2Camera();\n      case 'MAPBOX':\n        return this.mapboxCamera();\n      default:\n        return this.AMapCamera();\n    }\n    // return this.mapService.constructor.name === 'AMapService'\n    //   ? this.AMapCamera()\n    //   : this.mapboxCamera();\n  }\n\n  private mapboxCamera(): Camera {\n    const mercatorMatrix = new Matrix4().fromArray(\n      // @ts-ignore\n      this.mapService.map.transform.customLayerMatrix(),\n    );\n    this.camera.projectionMatrix = mercatorMatrix.multiply(\n      this.cameraTransform,\n    );\n    return this.camera;\n  }\n\n  private AMapCamera(): Camera {\n    // @ts-ignore\n    const mapCamera = this.mapService.map.getCameraState();\n    const camera = this.camera;\n    let { pitch, rotation } = mapCamera;\n    const { fov, near, far, height, aspect } = mapCamera;\n    pitch *= DEG2RAD;\n    rotation *= DEG2RAD;\n    // @ts-ignore\n    camera.fov = (180 * fov) / Math.PI;\n    // @ts-ignore\n    camera.aspect = aspect;\n    // @ts-ignore\n    camera.near = near;\n    // @ts-ignore\n    camera.far = far;\n    // @ts-ignore\n    camera.updateProjectionMatrix();\n    camera.position.z = height * Math.cos(pitch);\n    camera.position.x = height * Math.sin(pitch) * Math.sin(rotation);\n    camera.position.y = -height * Math.sin(pitch) * Math.cos(rotation);\n    camera.up.x = -Math.cos(pitch) * Math.sin(rotation);\n    camera.up.y = Math.cos(pitch) * Math.cos(rotation);\n    camera.up.z = Math.sin(pitch);\n    camera.lookAt(0, 0, 0);\n    camera.position.x += mapCamera.position.x;\n    camera.position.y += -mapCamera.position.y;\n    return camera;\n  }\n\n  private AMap2Camera(): Camera {\n    // @ts-ignore\n    const customCoords = this.mapService.map.customCoords;\n    customCoords.getCenter();\n\n    const camera = this.camera;\n    const {\n      near,\n      far,\n      fov,\n      up,\n      lookAt,\n      position,\n    } = customCoords.getCameraParams();\n    // @ts-ignore\n    camera.near = near;\n    // @ts-ignore\n    camera.far = far;\n    // @ts-ignore\n    camera.fov = fov;\n    // @ts-ignore\n    camera.position.set(...position);\n    // @ts-ignore\n    camera.up.set(...up);\n    // @ts-ignore\n    camera.lookAt(...lookAt);\n    // @ts-ignore\n    camera.updateProjectionMatrix();\n\n    return camera;\n  }\n}\n"],"file":"threeRenderService.js"}