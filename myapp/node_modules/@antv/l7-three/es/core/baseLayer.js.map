{"version":3,"sources":["../../src/core/baseLayer.ts"],"names":["BaseLayer","Matrix4","Scene","Vector3","ThreeRenderServiceType","DEG2RAD","Math","PI","ThreeJSLayer","callback","update","isUpdate","lnglat","altitude","rotation","scale","fromArray","mapService","getModelMatrix","threeRenderService","center","object","positionMatrix","getTranslateMatrix","applyMatrix4","lnglatToCoord","x","y","position","set","lngLatToCoord","coord","up","defaultLngLat","getCenter","modelMatrix","lng","lat","z","scaleMatrix","getContainer","get","config","getLayerConfig","onAddMeshes","scene","gl","rendererService","getGLContext","setCustomLayerDefaults","cullFace","constructor","name","BACK","FRONT","renderer","state","reset","autoClear","camera","getRenderCamera","render","setState","animateMixer","forEach","mixer","getTime","setDirty","setBaseState","push","color","console","warn"],"mappings":"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","sourcesContent":["import { ILayer, IMercator } from '@antv/l7-core';\nimport { BaseLayer } from '@antv/l7-layers';\nimport {\n  AnimationMixer,\n  Camera,\n  Matrix4,\n  Object3D,\n  PCFSoftShadowMap,\n  PerspectiveCamera,\n  Scene,\n  Vector3,\n  WebGLRenderer,\n} from 'three';\nimport {\n  IThreeRenderService,\n  ThreeRenderServiceType,\n} from './threeRenderService';\nconst DEG2RAD = Math.PI / 180;\ntype ILngLat = [number, number];\nexport default class ThreeJSLayer\n  extends BaseLayer<{\n    onAddMeshes: (threeScene: Scene, layer: ThreeJSLayer) => void;\n  }>\n  implements ILayer {\n  public type: string = 'custom';\n  public threeRenderService: IThreeRenderService;\n  public isUpdate: boolean = false;\n  public update: (() => void) | null = null;\n  // 构建 threejs 的 scene\n  private scene: Scene = new Scene();\n  private renderer: WebGLRenderer;\n  private animateMixer: AnimationMixer[] = [];\n  // 地图中点墨卡托坐标\n  private center: IMercator;\n\n  public setUpdate(callback: () => void) {\n    this.update = callback;\n    this.isUpdate = true;\n  }\n\n  /**\n   * 根据数据计算对应地图的模型矩阵 不同地图主要是点位偏移不同\n   */\n  public getModelMatrix(\n    lnglat: [number, number],\n    altitude: number = 0,\n    rotation: [number, number, number] = [0, 0, 0],\n    scale: [number, number, number] = [1, 1, 1],\n  ): Matrix4 {\n    return new Matrix4().fromArray(\n      this.mapService.getModelMatrix(\n        lnglat,\n        altitude,\n        rotation,\n        scale,\n        this.threeRenderService.center,\n      ),\n    );\n  }\n\n  /**\n   * 获取平移矩阵\n   * @param lnglat\n   * @param altitude\n   * @returns\n   */\n  public getTranslateMatrix(lnglat: ILngLat, altitude: number = 0) {\n    return this.getModelMatrix(lnglat, altitude, [0, 0, 0], [1, 1, 1]);\n  }\n\n  /**\n   * 设置当前物体往经纬度和高度方向的移动\n   * @param object\n   * @param lnglat\n   * @param altitude\n   */\n  public applyObjectLngLat(object: Object3D, lnglat: ILngLat, altitude = 0) {\n    const positionMatrix = this.getTranslateMatrix(lnglat, altitude);\n    object.applyMatrix4(positionMatrix);\n  }\n\n  /**\n   * 设置物体当前的经纬度和高度\n   * @param object\n   * @param lnglat\n   * @param altitude\n   */\n  public setObjectLngLat(object: Object3D, lnglat: ILngLat, altitude = 0) {\n    // @ts-ignore\n    const [x, y] = this.lnglatToCoord(lnglat);\n    object.position.set(x, y, altitude);\n  }\n\n  /**\n   * 将经纬度转为 three 世界坐标\n   * @param lnglat\n   * @returns\n   */\n  public lnglatToCoord(lnglat: ILngLat) {\n    // @ts-ignore\n    const [x, y] = this.mapService?.lngLatToCoord(\n      lnglat,\n      // @ts-ignore\n      this.threeRenderService.center,\n    );\n    return [x, y] as ILngLat;\n  }\n\n  /**\n   * 获取\n   * @param object\n   * @returns\n   */\n  public getObjectLngLat(object: Object3D) {\n    const coord = [object.position.x, object.position.y];\n    return [0, 0] as ILngLat;\n  }\n\n  /**\n   * 设置网格适配到地图坐标系\n   * @param object\n   */\n  public adjustMeshToMap(object: Object3D) {\n    object.up = new Vector3(0, 0, 1);\n    const defaultLngLat = this.mapService.getCenter();\n    const modelMatrix = this.getModelMatrix(\n      [defaultLngLat.lng, defaultLngLat.lat], // 经纬度坐标\n      0, // 高度，单位米/\n      [Math.PI / 2, -Math.PI, 0], // 沿 XYZ 轴旋转角度\n      [1, 1, 1], // 沿 XYZ 轴缩放比例\n    );\n    object.applyMatrix4(modelMatrix);\n  }\n\n  /**\n   * 设置网格的缩放 （主要是抹平 mapbox 底图时的差异，若是高德底图则可以直接设置网格的 scale 属性/方法）\n   * @param object\n   * @param x\n   * @param y\n   * @param z\n   */\n  public setMeshScale(\n    object: Object3D,\n    x: number = 1,\n    y: number = 1,\n    z: number = 1,\n  ) {\n    const scaleMatrix = new Matrix4();\n    scaleMatrix.scale(new Vector3(x, y, z));\n    object.applyMatrix4(scaleMatrix);\n  }\n\n  public buildModels() {\n    // @ts-ignore\n    this.threeRenderService = this.getContainer().get<IThreeRenderService>(\n      ThreeRenderServiceType,\n    );\n    const config = this.getLayerConfig();\n    if (config && config.onAddMeshes) {\n      config.onAddMeshes(this.scene, this);\n    }\n  }\n  public renderModels() {\n    if (this.isUpdate && this.update) {\n      this.update();\n    }\n    // 获取到 L7 的 gl\n    const gl = this.rendererService.getGLContext();\n    this.rendererService.setCustomLayerDefaults();\n    const cullFace =\n      this.mapService.constructor.name === 'AMapService' ? gl.BACK : gl.FRONT;\n    gl.cullFace(cullFace);\n\n    // threejs 的 renderer\n    const renderer = this.threeRenderService.renderer;\n    renderer.state.reset();\n    renderer.autoClear = false;\n\n    // 获取相机 （不同的地图获取对应的方式不同）\n    const camera = this.threeRenderService.getRenderCamera();\n\n    renderer.render(this.scene, camera);\n\n    this.rendererService.setState();\n    this.animateMixer.forEach((mixer: AnimationMixer) => {\n      mixer.update(this.getTime());\n    });\n\n    this.rendererService.setState();\n    this.rendererService.setDirty(true);\n    return this;\n  }\n\n  public renderAMapModels() {\n    const gl = this.rendererService.getGLContext();\n    // gl.frontFace(gl.CCW);\n    // gl.enable(gl.CULL_FACE);\n    // gl.cullFace(gl.BACK);\n    this.rendererService.setCustomLayerDefaults();\n    const renderer = this.threeRenderService.renderer;\n    renderer.state.reset();\n    renderer.autoClear = false;\n    renderer.render(this.scene, this.threeRenderService.getRenderCamera());\n    this.animateMixer.forEach((mixer: AnimationMixer) => {\n      mixer.update(this.getTime());\n    });\n    this.rendererService.setBaseState();\n    this.rendererService.setDirty(true);\n    return this;\n  }\n\n  public getRenderCamera() {\n    return this.threeRenderService.getRenderCamera();\n  }\n\n  public addAnimateMixer(mixer: AnimationMixer) {\n    this.animateMixer.push(mixer);\n  }\n\n  public setBottomColor(color: string): void {\n    console.warn('empty function');\n  }\n\n  public getBottomColor() {\n    return 'rgba(0, 0, 0, 0)';\n  }\n}\n"],"file":"baseLayer.js"}