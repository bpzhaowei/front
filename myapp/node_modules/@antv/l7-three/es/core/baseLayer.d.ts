import { ILayer } from '@antv/l7-core';
import { BaseLayer } from '@antv/l7-layers';
import { AnimationMixer, Camera, Matrix4, Object3D, Scene } from 'three';
import { IThreeRenderService } from './threeRenderService';
declare type ILngLat = [number, number];
export default class ThreeJSLayer extends BaseLayer<{
    onAddMeshes: (threeScene: Scene, layer: ThreeJSLayer) => void;
}> implements ILayer {
    type: string;
    threeRenderService: IThreeRenderService;
    isUpdate: boolean;
    update: (() => void) | null;
    private scene;
    private renderer;
    private animateMixer;
    private center;
    setUpdate(callback: () => void): void;
    /**
     * 根据数据计算对应地图的模型矩阵 不同地图主要是点位偏移不同
     */
    getModelMatrix(lnglat: [number, number], altitude?: number, rotation?: [number, number, number], scale?: [number, number, number]): Matrix4;
    /**
     * 获取平移矩阵
     * @param lnglat
     * @param altitude
     * @returns
     */
    getTranslateMatrix(lnglat: ILngLat, altitude?: number): Matrix4;
    /**
     * 设置当前物体往经纬度和高度方向的移动
     * @param object
     * @param lnglat
     * @param altitude
     */
    applyObjectLngLat(object: Object3D, lnglat: ILngLat, altitude?: number): void;
    /**
     * 设置物体当前的经纬度和高度
     * @param object
     * @param lnglat
     * @param altitude
     */
    setObjectLngLat(object: Object3D, lnglat: ILngLat, altitude?: number): void;
    /**
     * 将经纬度转为 three 世界坐标
     * @param lnglat
     * @returns
     */
    lnglatToCoord(lnglat: ILngLat): ILngLat;
    /**
     * 获取
     * @param object
     * @returns
     */
    getObjectLngLat(object: Object3D): ILngLat;
    /**
     * 设置网格适配到地图坐标系
     * @param object
     */
    adjustMeshToMap(object: Object3D): void;
    /**
     * 设置网格的缩放 （主要是抹平 mapbox 底图时的差异，若是高德底图则可以直接设置网格的 scale 属性/方法）
     * @param object
     * @param x
     * @param y
     * @param z
     */
    setMeshScale(object: Object3D, x?: number, y?: number, z?: number): void;
    buildModels(): void;
    renderModels(): this;
    renderAMapModels(): this;
    getRenderCamera(): Camera;
    addAnimateMixer(mixer: AnimationMixer): void;
    setBottomColor(color: string): void;
    getBottomColor(): string;
}
export {};
