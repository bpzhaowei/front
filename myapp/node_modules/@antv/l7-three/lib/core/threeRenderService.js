"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThreeRenderServiceType = exports.ThreeRenderService = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));

var _l7Core = require("@antv/l7-core");

var _inversify = require("inversify");

require("reflect-metadata");

var _three = require("three");

var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

var DEG2RAD = Math.PI / 180;
var ThreeRenderServiceType = Symbol.for('ThreeJSRenderService');
exports.ThreeRenderServiceType = ThreeRenderServiceType;
var ThreeRenderService = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_l7Core.TYPES.IRendererService), _dec3 = (0, _inversify.inject)(_l7Core.TYPES.IMapService), _dec(_class = (_class2 = function () {
  function ThreeRenderService() {
    (0, _classCallCheck2.default)(this, ThreeRenderService);
    (0, _defineProperty2.default)(this, "renderer", void 0);
    (0, _defineProperty2.default)(this, "camera", void 0);
    (0, _defineProperty2.default)(this, "center", void 0);
    (0, _defineProperty2.default)(this, "aspect", void 0);
    (0, _defineProperty2.default)(this, "update", void 0);
    (0, _defineProperty2.default)(this, "scene", void 0);
    (0, _defineProperty2.default)(this, "cameraTransform", void 0);
    (0, _initializerDefineProperty2.default)(this, "rendererService", _descriptor, this);
    (0, _initializerDefineProperty2.default)(this, "mapService", _descriptor2, this);
  }

  (0, _createClass2.default)(ThreeRenderService, [{
    key: "init",
    value: function init() {
      var canvas = this.rendererService.getCanvas();
      var gl = this.rendererService.getGLContext();

      if (canvas && gl) {
        var center = this.mapService.getCenter();
        this.center = this.mapService.lngLatToMercator([center.lng, center.lat], 0);
      }

      var _this$center = this.center,
          x = _this$center.x,
          y = _this$center.y,
          z = _this$center.z;
      this.cameraTransform = new _three.Matrix4().makeTranslation(x, y, z);
      this.renderer = new _three.WebGLRenderer({
        canvas: canvas,
        context: gl,
        antialias: true
      });
      this.renderer.autoClear = false;
      this.renderer.gammaFactor = 2.2;
      this.renderer.shadowMap.enabled = true;
      this.scene = new _three.Scene();
      this.aspect = gl.drawingBufferWidth / gl.drawingBufferHeight;
      this.camera = new _three.PerspectiveCamera(45, this.aspect, 1, 20000000);
    }
  }, {
    key: "getRenderCamera",
    value: function getRenderCamera() {
      switch (this.mapService.version) {
        case 'GAODE1.x':
          return this.AMapCamera();

        case 'GAODE2.x':
          return this.AMap2Camera();

        case 'MAPBOX':
          return this.mapboxCamera();

        default:
          return this.AMapCamera();
      }
    }
  }, {
    key: "mapboxCamera",
    value: function mapboxCamera() {
      var mercatorMatrix = new _three.Matrix4().fromArray(this.mapService.map.transform.customLayerMatrix());
      this.camera.projectionMatrix = mercatorMatrix.multiply(this.cameraTransform);
      return this.camera;
    }
  }, {
    key: "AMapCamera",
    value: function AMapCamera() {
      var mapCamera = this.mapService.map.getCameraState();
      var camera = this.camera;
      var pitch = mapCamera.pitch,
          rotation = mapCamera.rotation;
      var fov = mapCamera.fov,
          near = mapCamera.near,
          far = mapCamera.far,
          height = mapCamera.height,
          aspect = mapCamera.aspect;
      pitch *= DEG2RAD;
      rotation *= DEG2RAD;
      camera.fov = 180 * fov / Math.PI;
      camera.aspect = aspect;
      camera.near = near;
      camera.far = far;
      camera.updateProjectionMatrix();
      camera.position.z = height * Math.cos(pitch);
      camera.position.x = height * Math.sin(pitch) * Math.sin(rotation);
      camera.position.y = -height * Math.sin(pitch) * Math.cos(rotation);
      camera.up.x = -Math.cos(pitch) * Math.sin(rotation);
      camera.up.y = Math.cos(pitch) * Math.cos(rotation);
      camera.up.z = Math.sin(pitch);
      camera.lookAt(0, 0, 0);
      camera.position.x += mapCamera.position.x;
      camera.position.y += -mapCamera.position.y;
      return camera;
    }
  }, {
    key: "AMap2Camera",
    value: function AMap2Camera() {
      var _camera$position, _camera$up;

      var customCoords = this.mapService.map.customCoords;
      customCoords.getCenter();
      var camera = this.camera;

      var _customCoords$getCame = customCoords.getCameraParams(),
          near = _customCoords$getCame.near,
          far = _customCoords$getCame.far,
          fov = _customCoords$getCame.fov,
          up = _customCoords$getCame.up,
          lookAt = _customCoords$getCame.lookAt,
          position = _customCoords$getCame.position;

      camera.near = near;
      camera.far = far;
      camera.fov = fov;

      (_camera$position = camera.position).set.apply(_camera$position, (0, _toConsumableArray2.default)(position));

      (_camera$up = camera.up).set.apply(_camera$up, (0, _toConsumableArray2.default)(up));

      camera.lookAt.apply(camera, (0, _toConsumableArray2.default)(lookAt));
      camera.updateProjectionMatrix();
      return camera;
    }
  }]);
  return ThreeRenderService;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "rendererService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "mapService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.ThreeRenderService = ThreeRenderService;
//# sourceMappingURL=threeRenderService.js.map